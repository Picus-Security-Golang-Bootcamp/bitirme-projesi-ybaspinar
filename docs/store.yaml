swagger: '2.0'
info:
  description: 'This is a sample server BookStore server.  '
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: ybaspinar@protonmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /api/v1
tags:
  - name: Cart
    description: Everything about Cart
  - name: Category
    description: Everything about Category
  - name: Orders
    description: Everything about Orders
  - name: Product
    description: Everything about Product
  - name: User
    description: Everything about User
schemes:
  - https
  - http
paths:
  /cart/:
    get:
      tags:
        - Cart
      summary: get Cart
      description: Get cart with given userid and products array
      operationId: getCart
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Cart'
        '405':
          description: Invalid input
  /cart/create:
    post:
      tags:
        - Cart
      summary: Create a new Cart
      description: Create new cart with given userid and products array
      operationId: addCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Cart'
        '405':
          description: Invalid input
  /cart/update:
    post:
      tags:
        - Cart
      summary: Update given Cart
      description: Update cart with given data
      operationId: updateCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Cart'
        '405':
          description: Invalid input
  /category/create:
    post:
      tags:
        - Category
      summary: Create a new Category
      description: Create new category with given CSV file
      operationId: createCategory
      consumes:
        - text/csv
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input
  /category/:
    get:
      tags:
        - Category
      summary: get Cart
      description: Get cart with given userid and products array
      operationId: getCategory
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Cart'
        '405':
          description: Invalid input
  /order/complete:
    post:
      tags:
        - Orders
      summary: Create a new Cart
      description: Create new cart with given userid and products array
      operationId: completeOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Cart'
        '405':
          description: Invalid input
  /order/list:
    get:
      tags:
        - Orders
      summary: Create a new Cart
      description: Create new cart with given userid and products array
      operationId: getOrders
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Orders'
        '405':
          description: Invalid input
  /order/cancel:
    post:
      tags:
        - Orders
      summary: Create a new Cart
      description: Create new cart with given userid and products array
      operationId: cancelOrders
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Orders'
        '405':
          description: Invalid input
  /product/:
    get:
      tags:
        - Product
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: getProduct
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Products'
      responses:
        default:
          description: successful operation
  /product/create:
    post:
      tags:
        - Product
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Products'
      responses:
        default:
          description: successful operation
  /product/search:
    get:
      tags:
        - Product
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: searchProduct
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Products'
      responses:
        default:
          description: successful operation
  /product/delete:
    delete:
      tags:
        - Product
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: delProduct
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Products'
      responses:
        default:
          description: successful operation
  /product/update:
    post:
      tags:
        - Product
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: updateProduct
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Products'
      responses:
        default:
          description: successful operation
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: cUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Author object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Cart:
    type: object
    properties:
      id:
        type: string
      userid:
        type: string
      products:
        type: array
        items:
          $ref: '#/definitions/Products'
  Category:
    type: object
    required:
      - name
    properties:
      id:
        type: string
      name:
        type: string
      products:
        type: array
        items:
          $ref: '#/definitions/Products'
  Orders:
    type: object
    properties:
      id:
        type: string
      userid:
        type: string
      cart:
        type: array
        items:
          $ref: '#/definitions/Cart'
      status:
        type: string
      useraddres:
        type: string
  Products:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      sku:
        type: string
      description:
        type: string
      price:
        type: integer
        format: float64
      stock:
        type: integer
        format: int64
      category:
        type: array
        items:
          $ref: '#/definitions/Category'
  User:
    type: object
    properties:
      id:
        type: string
      firstname:
        type: string
      lastName:
        type: string
      password:
        type: string
      email:
        type: string
  Login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
      details:
        description: a (key, value) map.
        type: object
